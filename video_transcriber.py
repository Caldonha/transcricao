import os
import tempfile
import shutil
import json
import math
from pathlib import Path
from typing import List, Set, Dict
import time
from tqdm import tqdm
import re
import subprocess
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
import datetime

# Imports do Google Drive
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload, MediaFileUpload
import io

from moviepy.editor import VideoFileClip, AudioFileClip
import openai
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes
SCOPES = ['https://www.googleapis.com/auth/drive']  # Escopo completo para criar pastas

# Lista de IDs de pastas a monitorar no Google Drive
FOLDERS_TO_MONITOR = os.getenv('GOOGLE_DRIVE_FOLDERS_TO_MONITOR', '').split(',')
RESULTS_FOLDER_ID = os.getenv('GOOGLE_DRIVE_RESULTS_FOLDER_ID')  # Pasta para resultados

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
MAX_FILE_SIZE = 25 * 1024 * 1024  # 25MB em bytes
CHUNK_SIZE_MB = 20  # Tamanho de cada peda√ßo em MB
CHUNK_SIZE_BYTES = CHUNK_SIZE_MB * 1024 * 1024  # Convertendo MB para bytes
TEMP_DIR = Path('temp')
OUTPUT_DIR = Path('outputs')
PROCESSED_IDS_FILE = Path('processed_video_ids.json')
TOTAL_COST_FILE = Path('total_cost.json')  # Arquivo para armazenar o custo total acumulado

# Configurar OpenAI
openai.api_key = OPENAI_API_KEY

# Classe para gerenciar o custo total acumulado
class TotalCostTracker:
    def __init__(self):
        self.total_cost = 0.0
        self.last_updated = ""
        self.load()
    
    def load(self):
        """Carrega o custo total acumulado do arquivo"""
        if TOTAL_COST_FILE.exists():
            try:
                with open(TOTAL_COST_FILE, 'r') as f:
                    data = json.load(f)
                    self.total_cost = data.get('total_cost', 0.0)
                    self.last_updated = data.get('last_updated', "")
                print(f"üí∞ Custo total acumulado carregado: ${self.total_cost:.4f}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar custo total: {str(e)}")
    
    def save(self):
        """Salva o custo total acumulado no arquivo"""
        try:
            with open(TOTAL_COST_FILE, 'w') as f:
                data = {
                    'total_cost': self.total_cost,
                    'last_updated': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
                json.dump(data, f)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar custo total: {str(e)}")
    
    def add_cost(self, cost):
        """Adiciona um novo custo ao total acumulado"""
        self.total_cost += cost
        self.last_updated = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.save()
    
    def get_total(self):
        """Retorna o custo total acumulado"""
        return self.total_cost
    
    def get_summary(self):
        """Retorna um resumo do custo total"""
        return {
            'total_cost': self.total_cost,
            'last_updated': self.last_updated
        }

class TranscriptionCounter:
    def __init__(self):
        self.total_seconds = 0
        self.total_files = 0
        
    def add_transcription(self, duration_seconds):
        self.total_seconds += duration_seconds
        self.total_files += 1
        
    def get_minutes(self):
        return self.total_seconds / 60
        
    def estimate_cost(self):
        # Pre√ßo por minuto do GPT-4o Transcribe conforme documenta√ß√£o oficial mais recente
        # Atualizado para $0.006 por minuto
        GPT4O_TRANSCRIBE_PRICE_PER_MINUTE = 0.006  # $0.006 por minuto
        return self.get_minutes() * GPT4O_TRANSCRIBE_PRICE_PER_MINUTE
        
    def get_summary(self):
        return {
            'total_minutes': self.get_minutes(),
            'total_files': self.total_files,
            'estimated_cost': self.estimate_cost()
        }
        
    def reset(self):
        """Reinicia o contador para um novo v√≠deo"""
        self.total_seconds = 0
        self.total_files = 0

class TokenCounter:
    def __init__(self):
        self.total_tokens = 0
        self.prompt_tokens = 0
        self.completion_tokens = 0
        
    def add_usage(self, response):
        if hasattr(response, 'usage'):
            self.total_tokens += response.usage.total_tokens
            self.prompt_tokens += response.usage.prompt_tokens
            self.completion_tokens += response.usage.completion_tokens
            
    def get_summary(self):
        return {
            'total_tokens': self.total_tokens,
            'prompt_tokens': self.prompt_tokens,
            'completion_tokens': self.completion_tokens,
            'estimated_cost': self.estimate_cost()
        }
        
    def estimate_cost(self):
        # Pre√ßos atualizados para o GPT-4.1 conforme documenta√ß√£o mais recente (2025)
        # $0.01 por 1K tokens de entrada e $0.03 por 1K tokens de sa√≠da
        GPT41_PROMPT_PRICE = 0.01  # $0.01 por 1K tokens de prompt
        GPT41_COMPLETION_PRICE = 0.03  # $0.03 por 1K tokens de completion
        
        prompt_cost = (self.prompt_tokens / 1000) * GPT41_PROMPT_PRICE
        completion_cost = (self.completion_tokens / 1000) * GPT41_COMPLETION_PRICE
        
        return prompt_cost + completion_cost
        
    def reset(self):
        """Reinicia o contador para um novo v√≠deo"""
        self.total_tokens = 0
        self.prompt_tokens = 0
        self.completion_tokens = 0

# Criar inst√¢ncias globais dos contadores
token_counter = TokenCounter()
transcription_counter = TranscriptionCounter()
total_cost_tracker = TotalCostTracker()

def authenticate_google_drive() -> build:
    """Autentica com o Google Drive usando Service Account."""
    try:
        # Verificar se estamos no Railway
        if os.getenv('RAILWAY_ENVIRONMENT'):
            # Usar credenciais do Railway
            credentials_json = os.getenv('GOOGLE_CREDENTIALS')
            if not credentials_json:
                raise ValueError("GOOGLE_CREDENTIALS n√£o encontrado nas vari√°veis de ambiente")
            
            # Criar arquivo tempor√°rio com as credenciais
            with tempfile.NamedTemporaryFile(mode='w', delete=False) as temp_file:
                temp_file.write(credentials_json)
                temp_file_path = temp_file.name
            
            credentials = service_account.Credentials.from_service_account_file(
                temp_file_path,
                scopes=SCOPES
            )
            
            # Remover arquivo tempor√°rio
            os.unlink(temp_file_path)
        else:
            # Usar arquivo local
            credentials = service_account.Credentials.from_service_account_file(
                'service-account-key.json',
                scopes=SCOPES
            )
        
        service = build('drive', 'v3', credentials=credentials)
        return service
    except Exception as e:
        print(f"Erro ao autenticar com o Google Drive: {str(e)}")
        raise

def load_processed_ids() -> Set[str]:
    """Carrega os IDs dos v√≠deos j√° processados."""
    if PROCESSED_IDS_FILE.exists():
        with open(PROCESSED_IDS_FILE, 'r') as f:
            try:
                # Carregar como lista JSON e converter para conjunto
                id_list = json.load(f)
                return set(id_list)
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è Erro ao decodificar arquivo de IDs processados: {str(e)}")
                return set()
    return set()

def save_processed_ids(processed_ids: Set[str]):
    """Salva os IDs dos v√≠deos j√° processados como um array JSON."""
    try:
        # Converter conjunto para lista ordenada antes de salvar
        id_list = sorted(list(processed_ids))
        
        with open(PROCESSED_IDS_FILE, 'w') as f:
            # Formatar JSON com indenta√ß√£o para maior legibilidade
            json.dump(id_list, f, indent=2)
            
        print(f"‚úÖ {len(processed_ids)} IDs de v√≠deos processados salvos com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao salvar IDs de v√≠deos processados: {str(e)}")

def get_video_files(service: build, folder_id: str) -> List[dict]:
    """Obt√©m lista de arquivos de v√≠deo na pasta especificada."""
    query = f"'{folder_id}' in parents and mimeType contains 'video/'"
    results = service.files().list(q=query, fields="files(id, name, size)").execute()
    return results.get('files', [])

def download_file(service: build, file_id: str, file_name: str) -> str:
    """Baixa um arquivo do Google Drive para uma pasta tempor√°ria."""
    request = service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    
    # Limpar o nome do arquivo para evitar problemas com caracteres especiais
    safe_filename = ''.join(c if c.isalnum() or c in ['-', '_', '.'] else '_' for c in file_name)
    print(f"üíæ Nome original: {file_name}")
    print(f"üíæ Nome seguro para download: {safe_filename}")
    
    with tqdm(total=100, desc=f"Baixando {file_name}") as pbar:
        done = False
        while not done:
            status, done = downloader.next_chunk()
            pbar.update(int(status.progress() * 100))
    
    temp_path = TEMP_DIR / safe_filename
    with open(temp_path, 'wb') as f:
        f.write(fh.getvalue())
    
    return str(temp_path)

def create_folder_if_not_exists(service: build, folder_name: str, parent_id: str) -> str:
    """Cria uma pasta no Google Drive se ela n√£o existir e retorna o ID."""
    # Verificar se a pasta j√° existe
    query = f"name='{folder_name}' and '{parent_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
    response = service.files().list(q=query, spaces='drive', fields='files(id, name)').execute()
    
    # Se a pasta j√° existe, retorna o ID dela
    if response['files']:
        return response['files'][0]['id']
    
    # Se n√£o existe, cria a pasta
    folder_metadata = {
        'name': folder_name,
        'mimeType': 'application/vnd.google-apps.folder',
        'parents': [parent_id]
    }
    folder = service.files().create(body=folder_metadata, fields='id').execute()
    return folder.get('id')

def upload_file_to_drive(service: build, file_path: str, file_name: str, folder_id: str) -> str:
    """Faz upload de um arquivo para o Google Drive e retorna o ID."""
    try:
        print(f"üîÑ Iniciando upload do arquivo: {file_name}")
        print(f"üîÑ Caminho do arquivo: {file_path}")
        print(f"üîÑ Pasta de destino ID: {folder_id}")
        
        # Verificar se o arquivo existe e tem conte√∫do
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"Arquivo n√£o encontrado: {file_path}")
            
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            raise ValueError(f"Arquivo vazio: {file_path}")
            
        print(f"‚úÖ Arquivo verificado: {file_size / 1024:.2f} KB")
        
        # Verificar se a pasta existe e obter seu nome
        try:
            folder_info = service.files().get(fileId=folder_id, fields="name").execute()
            folder_name = folder_info.get("name", "Pasta desconhecida")
            print(f"‚úÖ Pasta de destino verificada: {folder_name} (ID: {folder_id})")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar pasta: {str(e)}")
            raise ValueError(f"Pasta n√£o encontrada: {folder_id}")
        
        file_metadata = {
            'name': file_name,
            'parents': [folder_id]
        }
        
        media = MediaFileUpload(file_path, resumable=True)
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id,name,parents'
        ).execute()
        
        file_id = file.get('id')
        
        # Verificar se o arquivo foi criado na pasta correta
        parents = file.get('parents', [])
        if folder_id not in parents:
            print(f"‚ö†Ô∏è AVISO: O arquivo pode ter sido criado em uma pasta diferente da esperada")
            print(f"‚ö†Ô∏è Pasta esperada: {folder_id}")
            print(f"‚ö†Ô∏è Pastas do arquivo: {parents}")
        
        print(f"‚úÖ Upload conclu√≠do: {file_name} (ID: {file_id}) na pasta {folder_name}")
        return file_id
        
    except Exception as e:
        print(f"‚ùå Erro no upload do arquivo {file_name}: {str(e)}")
        raise

def get_video_size_duration(video_path: str) -> tuple:
    """Retorna o tamanho do arquivo em bytes e a dura√ß√£o em segundos."""
    file_size = os.path.getsize(video_path)
    video = VideoFileClip(video_path)
    duration = video.duration
    video.close()
    return file_size, duration

def estimate_time_for_size(duration: float, total_size: int, target_size: int) -> float:
    """Estima a dura√ß√£o de tempo para um tamanho espec√≠fico de arquivo."""
    if total_size == 0:
        return 0
    return (duration * target_size) / total_size

def split_video_by_size(video_path: str, chunk_duration: int = 600) -> List[str]:
    """Divide um v√≠deo em partes de no m√°ximo 15MB cada."""
    print(f"üîÑ Iniciando divis√£o do v√≠deo: {video_path}")
    
    # Verificar se o arquivo existe
    if not os.path.exists(video_path):
        print(f"‚ùå Arquivo de v√≠deo n√£o encontrado: {video_path}")
        return []
    
    try:
        # Obter dura√ß√£o total e tamanho
        video = VideoFileClip(video_path)
        total_duration = video.duration
        total_size = os.path.getsize(video_path)
        
        print(f"‚è±Ô∏è Dura√ß√£o total: {total_duration:.2f} segundos")
        print(f"üìä Tamanho total: {total_size / (1024*1024):.2f}MB")
        
        # Se o v√≠deo for menor que 15MB, retornar o pr√≥prio arquivo
        if total_size <= 15 * 1024 * 1024:  # 15MB em bytes
            print("‚úÖ V√≠deo menor que 15MB, n√£o precisa dividir")
            return [video_path]
        
        # Calcular quantos chunks precisamos baseado no tamanho
        num_chunks = math.ceil(total_size / (15 * 1024 * 1024))  # Dividir em partes de 15MB
        print(f"üìù Dividindo em {num_chunks} partes de no m√°ximo 15MB")
        
        parts = []
        
        for i in tqdm(range(num_chunks), desc="Dividindo v√≠deo"):
            # Calcular dura√ß√£o aproximada para cada parte
            part_duration = total_duration / num_chunks
            start_time = i * part_duration
            end_time = min((i + 1) * part_duration, total_duration)
            
            part_path = TEMP_DIR / f"part_{i+1}_of_{num_chunks}.mp4"
            print(f"\nüîÑ Criando parte {i+1}: {part_path}")
            
            try:
                # Extrair subclip
                subclip = video.subclip(start_time, end_time)
                
                # Configurar par√¢metros de compress√£o para garantir tamanho m√°ximo
                subclip.write_videofile(
                    str(part_path),
                    codec='libx264',
                    audio_codec='aac',
                    bitrate='1000k',  # Taxa de bits mais baixa para garantir tamanho menor
                    preset='ultrafast',  # Compress√£o mais r√°pida
                    threads=4,
                    ffmpeg_params=[
                        '-maxrate', '1000k',
                        '-bufsize', '2000k',
                        '-crf', '28'  # Taxa de compress√£o mais alta
                    ]
                )
                
                # Verificar se o arquivo foi criado
                if not os.path.exists(part_path):
                    print(f"‚ö†Ô∏è Parte {i+1} n√£o foi criada: {part_path}")
                    continue
                
                # Verificar tamanho real
                part_size = os.path.getsize(part_path)
                print(f"üìä Tamanho da parte {i+1}: {part_size / (1024*1024):.2f}MB")
                
                # Se ainda estiver muito grande, tentar comprimir mais
                if part_size > 15 * 1024 * 1024:  # 15MB em bytes
                    print(f"‚ö†Ô∏è Parte {i+1} ainda est√° muito grande, comprimindo mais...")
                    compressed_path = TEMP_DIR / f"compressed_part_{i+1}_of_{num_chunks}.mp4"
                    
                    try:
                        # Comprimir mais usando MoviePy
                        subclip.write_videofile(
                            str(compressed_path),
                            codec='libx264',
                            audio_codec='aac',
                            bitrate='500k',  # Taxa de bits ainda mais baixa
                            preset='ultrafast',
                            threads=4,
                            ffmpeg_params=[
                                '-maxrate', '500k',
                                '-bufsize', '1000k',
                                '-crf', '32'  # Taxa de compress√£o ainda mais alta
                            ]
                        )
                        
                        # Verificar se o arquivo comprimido foi criado
                        if not os.path.exists(compressed_path):
                            print(f"‚ö†Ô∏è Arquivo comprimido n√£o foi criado: {compressed_path}")
                            parts.append(part_path)
                            continue
                        
                        # Remover arquivo original e usar o comprimido
                        if os.path.exists(part_path):
                            os.remove(part_path)
                        part_path = compressed_path
                        
                        # Verificar tamanho final
                        part_size = os.path.getsize(part_path)
                        print(f"‚úÖ Parte {i+1} comprimida: {part_size / (1024*1024):.2f}MB")
                        
                        # Se ainda estiver muito grande, dividir em mais partes
                        if part_size > 15 * 1024 * 1024:
                            print(f"‚ö†Ô∏è Parte {i+1} ainda est√° muito grande, dividindo em subpartes...")
                            subparts = split_video_by_size(str(part_path), chunk_duration // 2)
                            parts.extend(subparts)
                            continue
                            
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erro ao comprimir parte {i+1}: {e}")
                        # Continuar com o arquivo original se a compress√£o falhar
                
                parts.append(str(part_path))
                print(f"‚úÖ Parte {i+1} criada com sucesso!")
                
            except Exception as e:
                print(f"‚ùå Erro ao criar parte {i+1}: {str(e)}")
        
        video.close()
        print(f"\n‚úÖ Total de partes criadas: {len(parts)}")
        return parts
        
    except Exception as e:
        print(f"‚ùå Erro ao dividir v√≠deo: {str(e)}")
        return []

def get_audio_duration(audio_path: str) -> float:
    """Obt√©m a dura√ß√£o de um arquivo de √°udio em segundos."""
    cmd = subprocess.run([
        'ffprobe',
        '-v', 'error',
        '-show_entries', 'format=duration',
        '-of', 'default=noprint_wrappers=1:nokey=1',
        audio_path
    ], capture_output=True, text=True, check=True)
    
    return float(cmd.stdout.strip())

def split_audio(audio_path: str, chunk_duration: int = 600) -> List[str]:
    """Divide um arquivo de √°udio em partes de dura√ß√£o espec√≠fica."""
    print(f"üîÑ Iniciando divis√£o do √°udio: {audio_path}")
    
    # Verificar se o arquivo de √°udio existe
    if not os.path.exists(audio_path):
        print(f"‚ùå Arquivo de √°udio n√£o encontrado: {audio_path}")
        return []
    
    try:
        duration = get_audio_duration(audio_path)
        print(f"‚è±Ô∏è Dura√ß√£o total do √°udio: {duration:.2f} segundos")
        
        num_chunks = math.ceil(duration / chunk_duration)
        print(f"üìù Dividindo em {num_chunks} partes de {chunk_duration} segundos")
        
        chunks = []
        
        for i in range(num_chunks):
            start_time = i * chunk_duration
            end_time = min((i + 1) * chunk_duration, duration)
            
            chunk_path = TEMP_DIR / f"chunk_{i}.wav"
            print(f"üîÑ Criando chunk {i+1}: {chunk_path}")
            
            try:
                # Usar MoviePy para extrair o trecho de √°udio
                audio = AudioFileClip(audio_path)
                chunk = audio.subclip(start_time, end_time)
                chunk.write_audiofile(
                    str(chunk_path),
                    codec='pcm_s16le',
                    fps=16000,
                    nbytes=2
                )
                chunk.close()
                audio.close()
                
                # Verificar se o chunk foi criado
                if not os.path.exists(chunk_path):
                    print(f"‚ö†Ô∏è Chunk {i+1} n√£o foi criado: {chunk_path}")
                    continue
                    
                print(f"‚úÖ Chunk {i+1} criado: {chunk_path}")
                chunks.append(str(chunk_path))
                
            except Exception as e:
                print(f"‚ùå Erro ao criar chunk {i+1}: {str(e)}")
        
        print(f"‚úÖ Total de chunks criados: {len(chunks)}")
        return chunks
        
    except Exception as e:
        print(f"‚ùå Erro ao dividir √°udio: {str(e)}")
        return []

def transcribe_audio(video_path: str) -> str:
    """Transcreve um arquivo de v√≠deo usando a API da OpenAI."""
    print(f"üìù Iniciando transcri√ß√£o do arquivo: {video_path}")
    
    try:
        # Verificar se o v√≠deo existe antes de tentar processar
        if not os.path.exists(video_path):
            raise FileNotFoundError(f"O arquivo de v√≠deo n√£o existe: {video_path}")
        
        print(f"‚úÖ Arquivo de v√≠deo encontrado: {video_path}")
        
        # Obter dura√ß√£o do v√≠deo
        video = VideoFileClip(video_path)
        duration = video.duration
        video.close()
        
        print(f"‚è±Ô∏è Dura√ß√£o do v√≠deo: {duration:.2f} segundos")
        
        # Registrar dura√ß√£o para c√°lculo de custo
        transcription_counter.add_transcription(duration)
        
        chunk_duration = 600  # 10 minutos em segundos
        
        # Se o v√≠deo for menor que 10 minutos, transcreve direto
        if duration <= chunk_duration:
            print("üìù Transcrevendo v√≠deo completo (menor que 10 minutos)...")
            with open(video_path, 'rb') as video_file:
                transcript = openai.audio.transcriptions.create(
                    model="gpt-4o-transcribe",
                    file=video_file
                )
            print(f"‚úÖ Transcri√ß√£o conclu√≠da: {len(transcript.text)} caracteres")
            return transcript.text
        
        # Dividir o v√≠deo em partes
        print("üîÑ Dividindo v√≠deo em partes...")
        chunks = split_video_by_size(video_path, chunk_duration)
        print(f"‚úÖ V√≠deo dividido em {len(chunks)} partes")
        transcripts = []
        
        for i, chunk_path in enumerate(chunks):
            print(f"üìù Transcrevendo parte {i+1} de {len(chunks)}...")
            
            # Verificar se o chunk existe
            if not os.path.exists(chunk_path):
                print(f"‚ö†Ô∏è Chunk {i+1} n√£o encontrado: {chunk_path}")
                transcripts.append(f"[Chunk {i+1} n√£o encontrado]")
                continue
                
            try:
                # Transcrever o chunk
                with open(chunk_path, 'rb') as video_file:
                    transcript = openai.audio.transcriptions.create(
                        model="gpt-4o-transcribe",
                        file=video_file
                    )
                transcripts.append(transcript.text)
                print(f"‚úÖ Parte {i+1} transcrita com sucesso! ({len(transcript.text)} caracteres)")
                
            except Exception as e:
                print(f"‚ùå Erro ao transcrever parte {i+1}: {str(e)}")
                # Se der erro, tenta dividir em partes ainda menores
                if "token limit" in str(e).lower():
                    print("‚ö†Ô∏è Limite de tokens atingido. Dividindo em partes menores...")
                    smaller_chunks = split_video_by_size(chunk_path, chunk_duration // 2)
                    
                    for j, small_chunk in enumerate(smaller_chunks):
                        # Verificar se o small_chunk existe
                        if not os.path.exists(small_chunk):
                            print(f"‚ö†Ô∏è Subchunk {j+1} n√£o encontrado: {small_chunk}")
                            transcripts.append(f"[Subchunk {j+1} n√£o encontrado]")
                            continue
                            
                        try:
                            with open(small_chunk, 'rb') as video_file:
                                transcript = openai.audio.transcriptions.create(
                                    model="gpt-4o-transcribe",
                                    file=video_file
                                )
                            transcripts.append(transcript.text)
                            print(f"‚úÖ Subparte {j+1} transcrita com sucesso! ({len(transcript.text)} caracteres)")
                        except Exception as e2:
                            print(f"‚ùå Erro ao transcrever subparte {j+1}: {str(e2)}")
                            transcripts.append(f"[Erro na transcri√ß√£o da parte {i+1}.{j+1}]")
                        
                        # Limpar arquivo tempor√°rio
                        if os.path.exists(small_chunk):
                            os.remove(small_chunk)
                else:
                    transcripts.append(f"[Erro na transcri√ß√£o da parte {i+1}]")
            
            # Limpar arquivo tempor√°rio
            if os.path.exists(chunk_path):
                os.remove(chunk_path)
                print(f"üßπ Parte {i+1} removida")
        
        # Juntar todas as transcri√ß√µes
        print(f"\nüîÑ Juntando {len(transcripts)} transcri√ß√µes...")
        
        # Verificar se todas as transcri√ß√µes foram obtidas
        total_parts = len(chunks)
        successful_parts = sum(1 for t in transcripts if not t.startswith("["))
        if successful_parts < total_parts:
            print(f"‚ö†Ô∏è Aten√ß√£o: Apenas {successful_parts} de {total_parts} partes foram transcritas com sucesso.")
        
        full_transcript = " ".join(transcripts)
        print(f"‚úÖ Transcri√ß√µes juntadas ({len(full_transcript)} caracteres)")
        return full_transcript
        
    except Exception as e:
        print(f"‚ùå Erro ao processar v√≠deo: {e}")
        raise

def extract_client_name_from_transcript(transcript: str) -> str:
    """Tenta extrair o nome do cliente da transcri√ß√£o usando IA."""
    try:
        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {"role": "system", "content": "Voc√™ √© um assistente especializado em extrair informa√ß√µes de textos."},
                {"role": "user", "content": f"Esta √© a transcri√ß√£o de uma reuni√£o de vendas. Por favor, identifique e extraia APENAS o nome do cliente/prospect mencionado na conversa. Se houver m√∫ltiplos nomes, extraia o nome que parece ser do cliente principal. Se n√£o conseguir identificar com certeza, retorne 'Cliente N√£o Identificado'.\n\n{transcript[:2000]}"}
            ],
            max_tokens=50
        )
        client_name = response.choices[0].message.content.strip()
        
        # Limpar o resultado para ter apenas o nome
        client_name = re.sub(r'^[^a-zA-Z√Ä-√ø]*|[^a-zA-Z√Ä-√ø ]*$', '', client_name)
        client_name = re.sub(r'O nome do cliente √© |Cliente: |Nome: ', '', client_name)
        
        # Se o resultado for muito longo ou vazio, usar valor padr√£o
        if len(client_name) > 50 or len(client_name) < 2:
            return "Cliente N√£o Identificado"
            
        return client_name
    except Exception as e:
        print(f"Erro ao extrair nome do cliente: {e}")
        return "Cliente N√£o Identificado"

def extract_client_name_from_filename(filename: str) -> str:
    """Extrai o nome do cliente do nome do arquivo no formato 'ClaxClub - Nome do cliente'."""
    try:
        # Verificar se o nome do arquivo segue o padr√£o ClaxClub - Nome do cliente
        if " - " not in filename:
            return "Cliente N√£o Identificado"
        
        # Extrair parte ap√≥s "ClaxClub - "
        if filename.lower().startswith("claxclub"):
            parts = filename.split(" - ", 1)
            if len(parts) >= 2:
                # Extrai a parte ap√≥s "ClaxClub - "
                client_part = parts[1]
                
                # Se houver mais h√≠fens, pode ser data ou outras informa√ß√µes, pegar s√≥ a primeira parte
                if " - " in client_part:
                    client_part = client_part.split(" - ")[0]
                
                # Se houver par√™nteses, extrair o que est√° antes
                if "(" in client_part:
                    client_part = client_part.split("(")[0].strip()
                
                return client_part
        
        return "Cliente N√£o Identificado"
    except Exception as e:
        print(f"Erro ao extrair nome do cliente do nome do arquivo: {e}")
        return "Cliente N√£o Identificado"

def generate_sales_analysis(transcript: str) -> str:
    """Gera uma an√°lise detalhada da reuni√£o de vendas."""
    max_retries = 3
    retry_delay = 5  # segundos
    
    for attempt in range(max_retries):
        try:
            print(f"üîÑ Gerando an√°lise da reuni√£o... (Tentativa {attempt + 1}/{max_retries})")
            client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            response = client.chat.completions.create(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um assistente especializado em criar resumos de reuni√µes de forma clara, bem estruturada e profissional. Sua an√°lise deve considerar o contexto da conversa, sem julgamentos inadequados. Respeite estrat√©gias de vendas consultivas e firmes, como as ensinadas por nomes como Fl√°vio Augusto, Joel Jota e Caio Carneiro."},
                    {"role": "user", "content": f"""Sua tarefa √© gerar um resumo organizado no seguinte formato:

üß© Segmento:
[Descreva o segmento de atua√ß√£o do cliente de forma resumida]

üß† Modelo de neg√≥cios:
[Explique brevemente como o cliente atua, detalhando produtos/servi√ßos principais e o p√∫blico-alvo]

üí∞ Faturamento anual:
[Informe o faturamento anual ou a proje√ß√£o, se mencionado]

üìä Margens:
[Descreva a margem m√©dia de lucro, se dispon√≠vel]

üéØ Ticket m√©dio:
[Informe o ticket m√©dio por tipo de produto ou servi√ßo]

üîÅ Processo comercial:
[Resuma como √© o processo de vendas/comercial hoje ‚Äî equipe, canais, desafios]

üë• N√∫mero de colaboradores:
[Quantidade de colaboradores internos e externos]

ü©π O que ele precisa? Qual sua dor?
[Liste de forma objetiva os principais desafios e necessidades que o cliente relatou]

ü§ù Rela√ß√£o pr√©via com a empresa ou ecossistema:
[Explique se ele j√° conhece, j√° √© cliente, participa de outros programas ou tem admira√ß√£o pelo ecossistema]

üìà Probabilidade de fechamento:
[Avalie se a chance de fechamento √© alta, m√©dia ou baixa, com justificativa baseada no comportamento do cliente na reuni√£o]

‚ùå O que poderia ser feito de forma diferente na abordagem comercial:
[Em vez de criticar o vendedor, identifique oportunidades de melhoria com foco em adapta√ß√£o ao perfil do cliente e condu√ß√£o mais estrat√©gica ‚Äî principalmente quando o lead j√° expressou seus objetivos. Considere tamb√©m o tempo limitado da reuni√£o.]

‚è±Ô∏è Sentimento temporal:
[Analise o sentimento do cliente ao longo da reuni√£o, destacando momentos em que demonstrou maior anima√ß√£o ou resist√™ncia. Considere a limita√ß√£o de tempo e poss√≠veis interrup√ß√µes.]

üë§ Nome do cliente:
[Identifique o nome completo do cliente/prospect mencionado na conversa. Se n√£o for poss√≠vel identificar com certeza, escreva "Cliente N√£o Identificado"]

‚ö†Ô∏è Observa√ß√µes t√©cnicas:
‚Ä¢ Sempre separe claramente as falas entre vendedor e cliente, mesmo quando a transcri√ß√£o estiver com formata√ß√£o amb√≠gua.
‚Ä¢ Caso os dados de ROI estejam incompletos ou imprecisos, evite gerar an√°lises conclusivas e sinalize essa limita√ß√£o no relat√≥rio.

Ap√≥s isso, gere tamb√©m um resumo ainda mais enxuto, com apenas frases curtas e objetivas, focando nos seguintes pontos:
‚Ä¢ Segmento
‚Ä¢ Conhecimento pr√©vio sobre a empresa
‚Ä¢ Faturamento e margens
‚Ä¢ N√∫mero de colaboradores
‚Ä¢ P√∫blico-alvo
‚Ä¢ Principais dores e necessidades
‚Ä¢ Impress√£o sobre o interesse e pr√≥xima a√ß√£o

Importante:
‚Ä¢ Seja objetivo, profissional e direto.
‚Ä¢ Use emojis para organizar visualmente (como no exemplo acima).
‚Ä¢ N√£o invente dados que n√£o foram citados.
‚Ä¢ Considere o tempo real da reuni√£o: priorize os pontos discutidos com mais profundidade.
‚Ä¢ Seja coerente com o estilo de abordagem consultiva e firme.
‚Ä¢ Separe claramente o que foi falado pelo vendedor e pelo lead.

Transcri√ß√£o:
{transcript}"""}
                ],
                max_tokens=2000,
                timeout=30
            )
            
            # Adicionar uso de tokens ao contador
            token_counter.add_usage(response)
            
            return response.choices[0].message.content
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar an√°lise (Tentativa {attempt + 1}/{max_retries}): {str(e)}")
            
            if attempt < max_retries - 1:
                print(f"‚è≥ Aguardando {retry_delay} segundos antes de tentar novamente...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                print("‚ùå Todas as tentativas falharam")
                return f"""# An√°lise da Reuni√£o (GERA√á√ÉO FALHOU)

N√£o foi poss√≠vel gerar a an√°lise completa ap√≥s {max_retries} tentativas.
√öltimo erro: {str(e)}

## Resumo B√°sico
A transcri√ß√£o cont√©m aproximadamente {len(transcript)} caracteres.

## Recomenda√ß√£o
Por favor, verifique sua conex√£o com a internet e tente novamente mais tarde.
Se o problema persistir, entre em contato com o suporte t√©cnico.
"""

def extract_client_name_from_analysis(analysis: str) -> str:
    """Extrai o nome do cliente da an√°lise de vendas."""
    try:
        # Procurar pelo padr√£o "üë§ Nome do cliente:" ou similar na an√°lise
        name_pattern = re.search(r'(?:üë§|Nome do cliente:)[^\n]*?([A-Za-z√Ä-√ø\s]{2,50})', analysis, re.IGNORECASE)
        if name_pattern:
            client_name = name_pattern.group(1).strip()
            # Limpar o resultado
            client_name = re.sub(r'^\s*[:-]\s*', '', client_name)
            client_name = re.sub(r'Cliente N√£o Identificado|N√£o foi poss√≠vel identificar|Nome n√£o identificado', 'Cliente N√£o Identificado', client_name, re.IGNORECASE)
            
            # Se for muito curto ou longo, usar valor padr√£o
            if len(client_name) < 2 or len(client_name) > 50 or client_name.lower() == "n√£o identificado":
                return "Cliente N√£o Identificado"
                
            return client_name
            
        # Se n√£o encontrar o padr√£o espec√≠fico, verificar men√ß√µes gerais ao cliente
        possible_names = re.findall(r'cliente[:\s]+([A-Za-z√Ä-√ø\s]{2,50})', analysis, re.IGNORECASE)
        if possible_names:
            for name in possible_names:
                clean_name = name.strip()
                if len(clean_name) >= 2 and len(clean_name) <= 50:
                    return clean_name
        
        return "Cliente N√£o Identificado"
        
    except Exception as e:
        print(f"Erro ao extrair nome do cliente da an√°lise: {e}")
        return "Cliente N√£o Identificado"

def generate_roi_report(transcript: str, analysis: str) -> str:
    """Gera um relat√≥rio de ROI baseado na transcri√ß√£o e an√°lise da reuni√£o."""
    max_retries = 3
    retry_delay = 5  # segundos
    
    for attempt in range(max_retries):
        try:
            print(f"üîÑ Gerando relat√≥rio de ROI... (Tentativa {attempt + 1}/{max_retries})")
            
            # Obter a data atual para o relat√≥rio
            current_date = time.strftime("%d/%m/%Y")
            
            # Extrair informa√ß√µes importantes da an√°lise
            client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            
            # Primeiro, extrair dados essenciais da an√°lise para o relat√≥rio de ROI
            print("üîÑ Extraindo dados para relat√≥rio de ROI...")
            extract_response = client.chat.completions.create(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um assistente especializado em extrair informa√ß√µes de neg√≥cios de textos."},
                    {"role": "user", "content": f"""Extraia da an√°lise a seguir as informa√ß√µes relevantes para criar um relat√≥rio de ROI para o ClaxClub. 
                    Forne√ßa os dados no formato JSON com os seguintes campos:
                    
                    {{
                        "nome_empresario": "Nome completo do cliente/empres√°rio",
                        "faturamento": "Faturamento anual ou mensal com valor num√©rico",
                        "ticket_medio": "Ticket m√©dio de venda com valor num√©rico",
                        "margem": "Margem atual em porcentagem",
                        "produto_servico": "Produto ou servi√ßo principal",
                        "regiao_atuacao": "Regi√£o onde atua (estado, pa√≠s, cidade)",
                        "dores": ["Lista das principais dores mencionadas"],
                        "potencial_crescimento": "Alto, m√©dio ou baixo, com justificativa",
                        "sonho_visao": "Sonho ou vis√£o de futuro mencionada",
                        "interesses_mentoria": ["Lista de interesses na mentoria"],
                        "nivel_autoridade": "Alto, m√©dio ou baixo no mercado",
                        "abertura_mudanca": "Alta, m√©dia ou baixa"
                    }}
                    
                    Se alguma informa√ß√£o n√£o estiver dispon√≠vel, use "n√£o informado". 
                    
                    An√°lise:
                    {analysis}
                    
                    Transcri√ß√£o (use apenas se necess√°rio para complementar):
                    {transcript[:3000]}"""
                    }
                ],
                max_tokens=1000,
                timeout=30
            )
            
            # Adicionar uso de tokens ao contador
            token_counter.add_usage(extract_response)
            
            # Extrair o JSON da resposta
            try:
                extracted_data = json.loads(extract_response.choices[0].message.content)
                print("‚úÖ Dados para relat√≥rio de ROI extra√≠dos com sucesso")
            except json.JSONDecodeError:
                print("‚ö†Ô∏è Erro ao decodificar JSON, tentando extrair manualmente...")
                # Tentar extrair manualmente se o formato n√£o for perfeitamente JSON
                content = extract_response.choices[0].message.content
                # Encontrar o in√≠cio e fim do JSON na resposta
                start = content.find('{')
                end = content.rfind('}') + 1
                if start >= 0 and end > start:
                    try:
                        extracted_data = json.loads(content[start:end])
                        print("‚úÖ Dados extra√≠dos manualmente com sucesso")
                    except:
                        print("‚ùå Falha na extra√ß√£o manual")
                        extracted_data = {
                            "nome_empresario": "N√£o identificado",
                            "faturamento": "n√£o informado",
                            "ticket_medio": "n√£o informado",
                            "margem": "n√£o informado",
                            "produto_servico": "n√£o informado",
                            "regiao_atuacao": "n√£o informado",
                            "dores": ["n√£o informado"],
                            "potencial_crescimento": "n√£o informado",
                            "sonho_visao": "n√£o informado",
                            "interesses_mentoria": ["n√£o informado"],
                            "nivel_autoridade": "n√£o informado",
                            "abertura_mudanca": "n√£o informado"
                        }
                else:
                    extracted_data = {
                        "nome_empresario": "N√£o identificado",
                        "faturamento": "n√£o informado",
                        "ticket_medio": "n√£o informado",
                        "margem": "n√£o informado",
                        "produto_servico": "n√£o informado",
                        "regiao_atuacao": "n√£o informado",
                        "dores": ["n√£o informado"],
                        "potencial_crescimento": "n√£o informado",
                        "sonho_visao": "n√£o informado",
                        "interesses_mentoria": ["n√£o informado"],
                        "nivel_autoridade": "n√£o informado",
                        "abertura_mudanca": "n√£o informado"
                    }
            
            # Preparar os dados para o prompt
            nome = extracted_data.get("nome_empresario", "N√£o identificado")
            faturamento = extracted_data.get("faturamento", "n√£o informado")
            ticket_medio = extracted_data.get("ticket_medio", "n√£o informado")
            margem = extracted_data.get("margem", "n√£o informado")
            produto_servico = extracted_data.get("produto_servico", "n√£o informado")
            regiao_atuacao = extracted_data.get("regiao_atuacao", "n√£o informado")
            dores = ", ".join(extracted_data.get("dores", ["n√£o informado"]))
            potencial_crescimento = extracted_data.get("potencial_crescimento", "n√£o informado")
            sonho_visao = extracted_data.get("sonho_visao", "n√£o informado")
            interesses_mentoria = ", ".join(extracted_data.get("interesses_mentoria", ["n√£o informado"]))
            nivel_autoridade = extracted_data.get("nivel_autoridade", "n√£o informado")
            abertura_mudanca = extracted_data.get("abertura_mudanca", "n√£o informado")
            
            # Gerar o relat√≥rio de ROI com base nos dados extra√≠dos
            print("üîÑ Gerando documento de ROI com os dados extra√≠dos...")
            roi_response = client.chat.completions.create(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": """‚úÖ Prompt para cria√ß√£o de Agente IA - Documento P√≥s-Reuni√£o Comercial (ClaxClub)
Voc√™ √© um agente especialista em an√°lise de neg√≥cios e vendas, com foco em gerar um relat√≥rio personalizado para empres√°rios logo ap√≥s uma reuni√£o comercial. Seu objetivo √© mostrar, com dados e proje√ß√µes claras, como o ingresso no ClaxClub (clube de mentoria com Fl√°vio Augusto, Joel Jota e Caio Carneiro) pode gerar retorno financeiro (ROI tang√≠vel) e autoridade de mercado (ROI intang√≠vel)."""},
                    {"role": "user", "content": f"""Crie o documento de ROI para o cliente {nome}. 
Faturamento atual: {faturamento}
Ticket m√©dio atual de venda: {ticket_medio}
Margem atual: {margem}
Produto/servi√ßo principal: {produto_servico}
Regi√£o de atua√ß√£o: {regiao_atuacao}
Maiores dores reveladas na reuni√£o: {dores}
Potencial de crescimento: {potencial_crescimento}
Sonho ou vis√£o de futuro mencionada: {sonho_visao}
Interesses na mentoria: {interesses_mentoria}
N√≠vel de autoridade atual no mercado: {nivel_autoridade}
Grau de abertura √† mudan√ßa: {abertura_mudanca}

‚úçÔ∏è Instru√ß√µes de sa√≠da (output)
Gere um documento com os seguintes blocos, sempre usando linguagem direta, personalizada e profissional:

1.‚Å† ‚Å†Introdu√ß√£o Personalizada
Apresente uma vis√£o sobre o momento atual do cliente e o que foi percebido na reuni√£o. Reconhe√ßa conquistas e valide dores.

2.‚Å† ‚Å†Cen√°rio Atual vs. Poss√≠vel com o Clax
Simule crescimento de faturamento, ticket m√©dio e margem, mostrando o impacto direto mesmo sem depender de novos clientes. Inclua tamb√©m um cen√°rio com aumento de demanda. Use tabelas se poss√≠vel.

3.‚Å† ‚Å†ROI Tang√≠vel
Simule proje√ß√µes com n√∫meros claros (lucro, retorno do investimento)

Multiplicador do investimento no ClaxClub - caso n√£o tenha na conversa o valor do club, considere R$ 400.000,00.

4.‚Å† ‚Å†ROI Intang√≠vel
Liste os ganhos n√£o financeiros, como:

Autoridade por associa√ß√£o aos mentores

Networking com empres√°rios relevantes

Estrutura√ß√£o do neg√≥cio e do time

Acesso a treinamentos e capacita√ß√£o

Possibilidade de virar mentor e ganhar equity

5.‚Å† ‚Å†Forma de pagamento
Apresente a proposta como um fluxo inteligente de investimento (parcelas escalonadas, etc.)

6.‚Å† ‚Å†Conclus√£o personalizada
Reforce que o empres√°rio est√° exatamente na fase ideal para o ClaxClub, e que essa √© uma decis√£o estrat√©gica, n√£o apenas emocional. Termine com uma frase forte, como:

"Voc√™ tem muito a ganhar. E mais ainda, muito a contribuir."

O documento deve seguir exatamente essa estrutura de t√≥picos e ter cabe√ßalho com data atual ({current_date})."""
                    }
                ],
                max_tokens=3000,
                timeout=30
            )
            
            # Adicionar uso de tokens ao contador
            token_counter.add_usage(roi_response)
            
            # Formatar o relat√≥rio final
            roi_content = roi_response.choices[0].message.content
            
            # Verificar se h√° cabe√ßalho, caso contr√°rio, adicionar
            if "Relat√≥rio de ROI" not in roi_content and "ROI - ClaxClub" not in roi_content:
                cabe√ßalho = f"""**Relat√≥rio de ROI - Proposta ClaxClub**
Cliente: {nome}
Produto/Servi√ßo: {produto_servico}
Data: {current_date}

---

"""
                roi_content = cabe√ßalho + roi_content
            
            print("‚úÖ Relat√≥rio de ROI gerado com sucesso")
            return roi_content
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rio de ROI (Tentativa {attempt + 1}/{max_retries}): {str(e)}")
            
            if attempt < max_retries - 1:
                print(f"‚è≥ Aguardando {retry_delay} segundos antes de tentar novamente...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                print("‚ùå Todas as tentativas falharam")
                current_date = time.strftime("%d/%m/%Y")
                return f"""**Relat√≥rio de ROI - Proposta ClaxClub**
Cliente: [NOME EMPRES√ÅRIO/A N√ÉO INFORMADO]
Produto/Servi√ßo: [PRODUTO/SERVI√áO N√ÉO INFORMADO]
Data: {current_date}

---

# ‚ùå Relat√≥rio de ROI (GERA√á√ÉO FALHOU)

N√£o foi poss√≠vel gerar o relat√≥rio de ROI ap√≥s {max_retries} tentativas.
√öltimo erro: {str(e)}

## üîß Recomenda√ß√£o
Por favor, verifique sua conex√£o com a internet e tente novamente mais tarde.
Se o problema persistir, entre em contato com o suporte t√©cnico.
"""

def identify_speakers(transcript: str, meeting_info: Dict) -> str:
    """
    Identifica os diferentes falantes na transcri√ß√£o e formata o texto com nomes.
    
    Args:
        transcript: A transcri√ß√£o original
        meeting_info: Informa√ß√µes sobre a reuni√£o, incluindo vendedor e cliente
    
    Returns:
        Transcri√ß√£o formatada com identifica√ß√£o dos falantes
    """
    max_retries = 3
    retry_delay = 5  # segundos
    
    for attempt in range(max_retries):
        try:
            print(f"üîÑ Identificando falantes na transcri√ß√£o... (Tentativa {attempt + 1}/{max_retries})")
            
            # Sempre usar "Vendedor" para o vendedor 
            seller_name = "Vendedor"
            
            # Para o cliente, usar o nome real ou "Cliente" se n√£o identificado
            client_name = meeting_info.get('client_name', 'Cliente')
            if client_name == "Cliente N√£o Identificado":
                client_name = "Cliente"
            
            print(f"üîç Identificando falas entre: Vendedor e {client_name}")
            print(f"üìä Tamanho da transcri√ß√£o: {len(transcript)} caracteres")
            
            # Processar a transcri√ß√£o em uma √∫nica chamada, sem dividir
            client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            response = client.chat.completions.create(
                model="gpt-4.1",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um assistente especializado em an√°lise de conversas e identifica√ß√£o de falantes em transcri√ß√µes."},
                    {"role": "user", "content": f"""Identifique os diferentes falantes nesta transcri√ß√£o e reformate-a para que cada fala seja precedida pelo nome do falante seguido de dois pontos.

Informa√ß√µes importantes:
- O VENDEDOR deve ser SEMPRE identificado apenas como "Vendedor" (nunca use o nome real do vendedor)
- O CLIENTE deve ser identificado como "{client_name}"
- Podem existir outros participantes na conversa - identifique-os como "Participante 1", "Participante 2", etc.
- Mantenha a sequ√™ncia exata das falas e todo o conte√∫do original
- N√ÉO resuma, divida ou altere o conte√∫do das falas
- N√ÉO adicione introdu√ß√µes ou explica√ß√µes
- MANTENHA todas as falas na √≠ntegra, sem quebrar em partes menores
- IMPORTANTE: Certifique-se de sempre alternar corretamente entre Vendedor e {client_name}, analisando o contexto da conversa para identificar quem est√° falando

Exemplo do formato desejado:
Vendedor: Ol√°, tudo bem com voc√™? Obrigado por reservar um tempo para nossa conversa hoje.
{client_name}: Tudo bem sim, obrigado por me atender.
Vendedor: Ent√£o, como eu estava explicando por e-mail, a nossa solu√ß√£o...

Transcri√ß√£o:
{transcript}"""}
                ],
                max_tokens=4000,
                timeout=180  # Aumentar timeout para transcri√ß√µes longas
            )
            
            # Adicionar uso de tokens ao contador
            token_counter.add_usage(response)
            
            formatted_transcript = response.choices[0].message.content.strip()
            
            # Garantir que a formata√ß√£o est√° correta
            if not re.search(r'^[A-Za-z√Ä-√ø\s]+:', formatted_transcript, re.MULTILINE):
                # Se n√£o tiver o formato esperado (nome: fala), tentar formatar manualmente
                print("üîÑ Ajustando formato da transcri√ß√£o...")
                segments = re.split(r'\n\n+|\n(?=[A-Z])|(?<=[.!?])\s+(?=[A-Z])', transcript)
                formatted_lines = []
                for i, segment in enumerate(segments):
                    if segment.strip():
                        speaker = "Vendedor" if i % 2 == 0 else client_name
                        formatted_lines.append(f"{speaker}: {segment.strip()}")
                
                formatted_transcript = "\n".join(formatted_lines)
            
            # Verificar se n√£o h√° confus√£o entre Vendedor e Cliente
            real_seller_name = meeting_info.get('seller_name', '')
            if real_seller_name and real_seller_name in formatted_transcript:
                # Substituir o nome real do vendedor por "Vendedor"
                formatted_transcript = re.sub(
                    rf"{re.escape(real_seller_name)}:", 
                    "Vendedor:", 
                    formatted_transcript
                )
            
            # Remover espa√ßos duplos entre as falas para economizar tokens
            formatted_transcript = re.sub(r'\n\n+', '\n', formatted_transcript)
            
            print(f"‚úÖ Falantes identificados com sucesso!")
            return formatted_transcript
                
        except openai.RateLimitError as e:
            print(f"‚ö†Ô∏è Erro de limite de tokens (Tentativa {attempt + 1}/{max_retries}): {str(e)}")
            if attempt < max_retries - 1:
                print(f"‚è≥ Aguardando {retry_delay} segundos antes de tentar novamente...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                # Para erros de limite de tokens, usar abordagem simplificada
                print("‚ö†Ô∏è Usando abordagem simplificada devido a limita√ß√µes de tokens")
                return simple_speaker_identification(transcript, meeting_info)
        except Exception as e:
            print(f"‚ùå Erro ao identificar falantes (Tentativa {attempt + 1}/{max_retries}): {str(e)}")
            
            if attempt < max_retries - 1:
                print(f"‚è≥ Aguardando {retry_delay} segundos antes de tentar novamente...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                print("‚ùå Todas as tentativas falharam")
                return simple_speaker_identification(transcript, meeting_info)

def simple_speaker_identification(transcript: str, meeting_info: Dict) -> str:
    """
    Implementa√ß√£o simplificada para identificar falantes quando o m√©todo principal falha.
    
    Este m√©todo √© mais eficiente para transcri√ß√µes grandes, pois n√£o depende de modelos grandes
    de linguagem, mas √© menos preciso na identifica√ß√£o dos falantes.
    """
    print("üîÑ Usando m√©todo alternativo para identifica√ß√£o de falantes...")
    
    # Para o cliente, usar o nome real ou "Cliente" se n√£o identificado
    client_name = meeting_info.get('client_name', 'Cliente') 
    if client_name == "Cliente N√£o Identificado":
        client_name = "Cliente"
    
    # Dividir por par√°grafos ou frases completas
    segments = re.split(r'\n\n+|\n(?=[A-Z])|(?<=[.!?])\s+(?=[A-Z])', transcript)
    formatted_lines = []
    
    # Padr√µes para detectar perguntas t√≠picas de vendedor
    vendedor_patterns = [
        r'(?i)como posso (ajudar|auxiliar)',
        r'(?i)qual (√©|seria) (o seu|seu)',
        r'(?i)gostaria de (saber|entender)',
        r'(?i)voc√™ (j√°|tem|possui)',
        r'(?i)poderia me (contar|falar)',
        r'(?i)(vamos|podemos) (conversar|falar)',
        r'(?i)(obrigado|agrade√ßo)',
        r'(?i)bem(-|\s)vindo',
        r'(?i)prazer em (conhecer|falar)',
        r'(?i)ent√£o.{1,30}(como|qual)'
    ]
    
    # Tente identificar quem come√ßa a conversa - normalmente √© o vendedor
    current_speaker = "Vendedor"
    
    for i, segment in enumerate(segments):
        if not segment.strip():
            continue
            
        # Detectar padr√µes de fala do vendedor
        is_vendedor = False
        if i == 0:  # Primeira fala geralmente √© do vendedor
            is_vendedor = True
        else:
            # Verificar padr√µes de fala t√≠picos de vendedor
            for pattern in vendedor_patterns:
                if re.search(pattern, segment):
                    is_vendedor = True
                    break
        
        # Alternar falantes se n√£o for o vendedor
        if not is_vendedor:
            current_speaker = client_name if current_speaker == "Vendedor" else "Vendedor"
        
        # Adicionar fala formatada (sem negrito)
        formatted_lines.append(f"{current_speaker}: {segment.strip()}")
        
        # Alternar para pr√≥xima fala
        current_speaker = client_name if current_speaker == "Vendedor" else "Vendedor"
    
    # Juntar com quebras de linha simples, sem espa√ßos extras
    return "\n".join(formatted_lines)

def format_transcript_for_output(transcript: str, meeting_info: Dict) -> str:
    """Formata a transcri√ß√£o para um formato mais estruturado para salvar."""
    timestamp = time.strftime("%d/%m/%Y %H:%M")
    
    # Verificar o tamanho da transcri√ß√£o
    transcript_length = len(transcript)
    print(f"üìä Tamanho da transcri√ß√£o original: {transcript_length} caracteres")
    
    # Usar a transcri√ß√£o original sem identifica√ß√£o de falantes
    print("‚ÑπÔ∏è Mantendo transcri√ß√£o original sem identifica√ß√£o de falantes...")
    formatted_transcript = transcript
    
    formatted_output = f"""# TRANSCRI√á√ÉO COMPLETA DA REUNI√ÉO

Data de processamento: {timestamp}

---

{formatted_transcript}

---
"""
    return formatted_output

def save_results(service: build, transcript: str, analysis: str, meeting_info: Dict, original_folder_id: str):
    """
    Salva a transcri√ß√£o e a an√°lise em uma pasta espec√≠fica criada dentro da pasta original do v√≠deo.
    Para cada v√≠deo, cria uma pasta dedicada para seus arquivos de transcri√ß√£o e an√°lise.
    """
    try:
        # Extrair informa√ß√µes
        original_filename = meeting_info.get('original_filename', '')
        client_name = meeting_info.get('client_name', 'Cliente N√£o Identificado')
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        date_formatted = time.strftime("%d-%m-%Y")
        
        print(f"üíæ Iniciando salvamento dos resultados...")
        print(f"üíæ Pasta original ID: {original_folder_id}")
        
        # Verificar a pasta original
        try:
            folder_info = service.files().get(fileId=original_folder_id, fields="name").execute()
            original_folder_name = folder_info.get("name", "Pasta desconhecida")
            print(f"üíæ Pasta original: {original_folder_name} (ID: {original_folder_id})")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar pasta original: {str(e)}")
            original_folder_name = "Pasta desconhecida"
        
        # Criar nome para a pasta espec√≠fica com o nome do arquivo
        video_folder_name = f"Transcri√ß√£o - {original_filename}"
        print(f"üíæ Criando pasta para o arquivo: {video_folder_name}")
        
        # Criar pasta espec√≠fica para o v√≠deo dentro da pasta original
        folder_metadata = {
            'name': video_folder_name,
            'mimeType': 'application/vnd.google-apps.folder',
            'parents': [original_folder_id]
        }
        
        try:
            video_folder = service.files().create(body=folder_metadata, fields='id,name').execute()
            video_folder_id = video_folder.get('id')
            print(f"‚úÖ Pasta criada: {video_folder_name} (ID: {video_folder_id})")
        except Exception as e:
            print(f"‚ùå Erro ao criar pasta para o v√≠deo: {str(e)}")
            raise
        
        print(f"üíæ Tamanho da transcri√ß√£o: {len(transcript)} caracteres")
        print(f"üíæ Tamanho da an√°lise: {len(analysis)} caracteres")
        
        # Formatar transcri√ß√£o e an√°lise
        formatted_transcript = format_transcript_for_output(transcript, meeting_info)
        
        # Gerar relat√≥rio de ROI
        print(f"üîÑ Gerando relat√≥rio de ROI...")
        roi_report = generate_roi_report(transcript, analysis)
        print(f"‚úÖ Relat√≥rio de ROI gerado: {len(roi_report)} caracteres")
        
        # Definir nomes de arquivos mais estruturados
        transcript_filename = f"Transcri√ß√£o - {date_formatted}.md"
        analysis_filename = f"An√°lise - {date_formatted}.md"
        roi_filename = f"Relat√≥rio ROI - {date_formatted}.md"
        
        # Salvar primeiro localmente para depois fazer upload
        safe_filename = ''.join(c if c.isalnum() or c in ['-', '_'] else '_' for c in Path(original_filename).stem)
        local_transcript_path = OUTPUT_DIR / f"{safe_filename}_transcript_{timestamp}.md"
        local_analysis_path = OUTPUT_DIR / f"{safe_filename}_analysis_{timestamp}.md"
        local_roi_path = OUTPUT_DIR / f"{safe_filename}_roi_{timestamp}.md"
        
        print(f"üíæ Salvando arquivos localmente:")
        print(f"üíæ - Transcri√ß√£o: {local_transcript_path}")
        print(f"üíæ - An√°lise: {local_analysis_path}")
        print(f"üíæ - Relat√≥rio ROI: {local_roi_path}")
        
        # Salvar localmente
        with open(local_transcript_path, 'w', encoding='utf-8') as f:
            f.write(formatted_transcript)
        
        with open(local_analysis_path, 'w', encoding='utf-8') as f:
            f.write(analysis)
            
        with open(local_roi_path, 'w', encoding='utf-8') as f:
            f.write(roi_report)
        
        # Verificar se os arquivos foram salvos corretamente
        if os.path.exists(local_transcript_path) and os.path.getsize(local_transcript_path) > 0:
            print(f"‚úÖ Arquivo de transcri√ß√£o salvo localmente: {os.path.getsize(local_transcript_path) / 1024:.2f} KB")
        else:
            print(f"‚ùå Erro ao salvar arquivo de transcri√ß√£o local")
            
        if os.path.exists(local_analysis_path) and os.path.getsize(local_analysis_path) > 0:
            print(f"‚úÖ Arquivo de an√°lise salvo localmente: {os.path.getsize(local_analysis_path) / 1024:.2f} KB")
        else:
            print(f"‚ùå Erro ao salvar arquivo de an√°lise local")
            
        if os.path.exists(local_roi_path) and os.path.getsize(local_roi_path) > 0:
            print(f"‚úÖ Arquivo de relat√≥rio ROI salvo localmente: {os.path.getsize(local_roi_path) / 1024:.2f} KB")
        else:
            print(f"‚ùå Erro ao salvar arquivo de relat√≥rio ROI local")
        
        # Upload para a pasta espec√≠fica do v√≠deo
        print(f"üíæ Fazendo upload para a pasta: {video_folder_name}")
        
        try:
            transcript_id = upload_file_to_drive(
                service, 
                str(local_transcript_path), 
                transcript_filename, 
                video_folder_id  # Usar a pasta espec√≠fica do v√≠deo
            )
            
            print(f"‚úÖ Transcri√ß√£o enviada para o Drive (ID: {transcript_id})")
            
            analysis_id = upload_file_to_drive(
                service, 
                str(local_analysis_path), 
                analysis_filename, 
                video_folder_id  # Usar a pasta espec√≠fica do v√≠deo
            )
            
            print(f"‚úÖ An√°lise enviada para o Drive (ID: {analysis_id})")
            
            roi_id = upload_file_to_drive(
                service, 
                str(local_roi_path), 
                roi_filename, 
                video_folder_id  # Usar a pasta espec√≠fica do v√≠deo
            )
            
            print(f"‚úÖ Relat√≥rio ROI enviado para o Drive (ID: {roi_id})")
            
            print(f"‚úì Documentos enviados para a pasta: {video_folder_name}")
            print(f"  - Transcri√ß√£o: {transcript_filename} (ID: {transcript_id})")
            print(f"  - An√°lise: {analysis_filename} (ID: {analysis_id})")
            print(f"  - Relat√≥rio ROI: {roi_filename} (ID: {roi_id})")
            
            # Verificar os arquivos ap√≥s upload
            print("üîç Verificando arquivos criados...")
            for file_id in [transcript_id, analysis_id, roi_id]:
                try:
                    file_info = service.files().get(fileId=file_id, fields="name,parents").execute()
                    parents = file_info.get("parents", [])
                    if video_folder_id in parents:
                        print(f"‚úÖ Arquivo {file_info.get('name')} est√° na pasta correta: {video_folder_name}")
                    else:
                        print(f"‚ö†Ô∏è Arquivo {file_info.get('name')} pode n√£o estar na pasta correta!")
                        print(f"‚ö†Ô∏è Pasta esperada: {video_folder_id}")
                        print(f"‚ö†Ô∏è Pastas do arquivo: {parents}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao verificar arquivo {file_id}: {str(e)}")
            
            return transcript_id, analysis_id, roi_id
        except Exception as e:
            print(f"‚ùå Erro ao fazer upload para o Google Drive: {str(e)}")
            print(f"üí° Os arquivos ainda est√£o dispon√≠veis localmente em {OUTPUT_DIR}")
            raise
            
    except Exception as e:
        print(f"‚ùå Erro ao salvar resultados: {str(e)}")
        # Tentar salvar localmente como fallback
        try:
            fallback_transcript = OUTPUT_DIR / f"fallback_transcript_{timestamp}.md"
            fallback_analysis = OUTPUT_DIR / f"fallback_analysis_{timestamp}.md"
            fallback_roi = OUTPUT_DIR / f"fallback_roi_{timestamp}.md"
            
            with open(fallback_transcript, 'w', encoding='utf-8') as f:
                f.write(transcript)
            
            with open(fallback_analysis, 'w', encoding='utf-8') as f:
                f.write(analysis)
                
            with open(fallback_roi, 'w', encoding='utf-8') as f:
                f.write(roi_report if 'roi_report' in locals() else "Erro ao gerar relat√≥rio ROI")
                
            print(f"‚ö†Ô∏è Fallback: Arquivos salvos como {fallback_transcript}, {fallback_analysis} e {fallback_roi}")
        except Exception as e2:
            print(f"‚ùå Erro ao salvar fallback: {str(e2)}")
        
        raise

def process_video(service: build, video_path: str, seller_name: str, original_filename: str, original_folder_id: str):
    """Processa um v√≠deo, transcreve e gera an√°lise de vendas."""
    print(f"\nüîÑ Iniciando processamento do v√≠deo: {original_filename}")
    
    # Reiniciar contadores para este v√≠deo
    token_counter.reset()
    transcription_counter.reset()
    
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(video_path):
            raise FileNotFoundError(f"O sistema n√£o pode encontrar o arquivo especificado: {video_path}")
        
        # Verificar tamanho do arquivo
        file_size = os.path.getsize(video_path)
        print(f"üìä Tamanho do arquivo: {file_size / (1024*1024):.2f}MB")
        
        # Tentar extrair nome do cliente do t√≠tulo do arquivo primeiro
        client_name = extract_client_name_from_filename(original_filename)
        print(f"üîç Nome do cliente extra√≠do do t√≠tulo: {client_name}")
        
        # Lista para armazenar todas as transcri√ß√µes
        all_transcripts = []
    
        if file_size <= MAX_FILE_SIZE:
            # Se o arquivo for menor que 25MB, transcreve diretamente
            print("üìù Arquivo menor que 25MB, transcrevendo diretamente...")
            transcript = transcribe_audio(video_path)
            all_transcripts.append(transcript)
        else:
            # Se o arquivo for maior que 25MB, divide em partes
            print(f"üìù Arquivo maior que 25MB, dividindo em partes...")
            parts = split_video_by_size(video_path)
            
            if not parts:
                raise ValueError("Falha ao dividir o v√≠deo em partes menores")
            
            print(f"‚úÖ V√≠deo dividido em {len(parts)} partes")
            
            # Transcrever cada parte
            for i, part in enumerate(parts, 1):
                print(f"\nüîÑ Transcrevendo parte {i} de {len(parts)}...")
                
                if not os.path.exists(part):
                    print(f"‚ö†Ô∏è Parte {i} n√£o encontrada: {part}")
                    continue
                
                part_size = os.path.getsize(part)
                print(f"üìä Tamanho da parte {i}: {part_size / (1024*1024):.2f}MB")
            
                try:
                    transcript = transcribe_audio(part)
                    all_transcripts.append(transcript)
                    print(f"‚úÖ Parte {i} transcrita com sucesso!")
                except Exception as e:
                    print(f"‚ùå Erro ao transcrever parte {i}: {str(e)}")
                    # Usar marcador de erro menos intrusivo
                    all_transcripts.append(f" [Falha na transcri√ß√£o. Continua na pr√≥xima parte.] ")
                
                # Remover parte tempor√°ria
                if part != video_path and os.path.exists(part):
                    os.remove(part)
                    print(f"üßπ Parte {i} removida")
            
            # Verificar se pelo menos uma parte foi transcrita
            if not any(not t.startswith(" [Falha") for t in all_transcripts):
                raise ValueError("Todas as partes da transcri√ß√£o falharam. N√£o foi poss√≠vel transcrever o v√≠deo.")
        
        # Juntar todas as transcri√ß√µes
        print("\nüîÑ Juntando todas as transcri√ß√µes...")
        full_transcript = " ".join(all_transcripts)
        
        # Verificar se o resultado final √© razo√°vel
        if len(full_transcript) < 100:
            print("‚ö†Ô∏è A transcri√ß√£o resultante √© muito curta, pode ter ocorrido um erro.")
        
        print(f"‚úÖ Transcri√ß√µes juntadas ({len(full_transcript)} caracteres)")
    
        # Gerar an√°lise de vendas
        print("\nüîÑ Gerando an√°lise da reuni√£o...")
        analysis = generate_sales_analysis(full_transcript)
        print("‚úÖ An√°lise gerada com sucesso!")
        
        # Se n√£o conseguimos extrair o nome do cliente do t√≠tulo, tentar extrair da an√°lise
        if client_name == "Cliente N√£o Identificado":
            print("\nüîÑ Tentando extrair nome do cliente da an√°lise...")
            client_name = extract_client_name_from_analysis(analysis)
            print(f"‚úÖ Nome do cliente extra√≠do da an√°lise: {client_name}")
    
        # Informa√ß√µes da reuni√£o
        meeting_info = {
            'seller_name': seller_name,
            'client_name': client_name,
            'original_filename': original_filename
        }
    
        # Salvar resultados na pasta original do v√≠deo
        print("\nüîÑ Salvando resultados na pasta original do v√≠deo...")
        save_results(service, full_transcript, analysis, meeting_info, original_folder_id)
        print("‚úÖ Resultados salvos com sucesso!")
        
        # No final do processamento, exibir o resumo de tokens e transcri√ß√µes
        token_summary = token_counter.get_summary()
        transcription_summary = transcription_counter.get_summary()
        
        print("\nüìä Resumo de Uso da API OpenAI:")
        print(f"Total de Tokens GPT-4.1: {token_summary['total_tokens']:,}")
        print(f"Tokens de Prompt: {token_summary['prompt_tokens']:,}")
        print(f"Tokens de Complet√£o: {token_summary['completion_tokens']:,}")
        print(f"Custo Estimado GPT-4.1: ${token_summary['estimated_cost']:.4f}")
        
        print("\nüìä Resumo de Transcri√ß√µes:")
        print(f"Total de Minutos: {transcription_summary['total_minutes']:.2f}")
        print(f"Total de Arquivos: {transcription_summary['total_files']}")
        print(f"Custo Estimado Transcri√ß√µes: ${transcription_summary['estimated_cost']:.4f}")
        
        custo_atual = token_summary['estimated_cost'] + transcription_summary['estimated_cost']
        print(f"\nüí∞ Custo Total Estimado: ${custo_atual:.4f}")
        
        # Adicionar ao custo total acumulado
        total_cost_tracker.add_cost(custo_atual)
        total_summary = total_cost_tracker.get_summary()
        print(f"\nüí∏ Custo Total Acumulado: ${total_summary['total_cost']:.4f}")
        print(f"üìÖ √öltima atualiza√ß√£o: {total_summary['last_updated']}")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao processar v√≠deo: {str(e)}")
        raise
        
    finally:
        # Limpar arquivo tempor√°rio
        if os.path.exists(video_path):
            try:
                os.remove(video_path)
                print(f"üßπ Arquivo tempor√°rio removido: {video_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao remover arquivo tempor√°rio: {str(e)}")
        
        print("\n‚úÖ Processamento finalizado!")

def extract_owner_name(file_name: str) -> str:
    """Extrai o nome da pessoa do nome do arquivo."""
    # Tenta extrair no formato "Nome da Pessoa - Descri√ß√£o.mp4"
    if " - " in file_name:
        return file_name.split(" - ")[0].strip()
    
    # Tenta extrair no formato "Nome_Sobrenome_Data.mp4" ou "Nome_Sobrenome.mp4"
    name_match = re.match(r'^([A-Za-z√Ä-√ø]+[_\s][A-Za-z√Ä-√ø]+)', file_name)
    if name_match:
        return name_match.group(1).replace('_', ' ')
    
    # Se n√£o conseguir extrair, usa o nome do arquivo sem extens√£o
    return Path(file_name).stem

def main():
    # Criar diret√≥rios necess√°rios
    TEMP_DIR.mkdir(exist_ok=True)
    OUTPUT_DIR.mkdir(exist_ok=True)
    
    # Verificar configura√ß√µes
    if not FOLDERS_TO_MONITOR or FOLDERS_TO_MONITOR[0] == '':
        print("ERRO: Nenhuma pasta para monitorar configurada no arquivo .env")
        print("Configure a vari√°vel GOOGLE_DRIVE_FOLDERS_TO_MONITOR com IDs separados por v√≠rgula")
        return
    
    # Carregar IDs de v√≠deos j√° processados
    processed_ids = load_processed_ids()
    
    # Autenticar com Google Drive usando Service Account
    service = authenticate_google_drive()
    
    # Verificar e mostrar informa√ß√£o sobre as pastas
    print(f"Pastas monitoradas: {len(FOLDERS_TO_MONITOR)} pastas")
    for i, folder_id in enumerate(FOLDERS_TO_MONITOR):
        print(f"  {i+1}. Pasta ID: {folder_id}")
    
    print(f"Monitorando pastas do Google Drive...")
    print(f"Esperando por novos v√≠deos... ({len(processed_ids)} v√≠deos j√° processados)")
    
    while True:
        try:
            all_new_videos = []
            
            # Verificar cada pasta monitorada
            for folder_id in FOLDERS_TO_MONITOR:
                # Obter lista de v√≠deos na pasta
                video_files = get_video_files(service, folder_id)
                
                # Filtrar apenas v√≠deos novos
                new_videos = [v for v in video_files if v['id'] not in processed_ids]
                
                # Adicionar informa√ß√£o da pasta fonte
                for v in new_videos:
                    v['source_folder_id'] = folder_id
                
                all_new_videos.extend(new_videos)
            
            if all_new_videos:
                print(f"\nEncontrados {len(all_new_videos)} novos v√≠deos!")
                
                for video in all_new_videos:
                    print(f"\nProcessando: {video['name']} (ID: {video['id']})")
                    
                    # Extrair nome do vendedor do nome do arquivo
                    seller_name = extract_owner_name(video['name'])
                    print(f"Nome do vendedor (do arquivo): {seller_name}")
                    
                    try:
                        # Baixar v√≠deo
                        video_path = download_file(service, video['id'], video['name'])
                        
                        # Verificar se o download foi bem sucedido
                        if not os.path.exists(video_path):
                            raise FileNotFoundError(f"Falha ao baixar o v√≠deo: {video_path}")
                        
                        # Processar v√≠deo
                        process_video(service, video_path, seller_name, video['name'], video['source_folder_id'])
                        
                        # Marcar como processado
                        processed_ids.add(video['id'])
                        save_processed_ids(processed_ids)
                        
                        print(f"‚úì V√≠deo {video['name']} processado com sucesso!")
                        
                        # Adicionar tempo de espera de 2 minutos entre os v√≠deos
                        print("\n‚è≥ Aguardando 2 minutos antes de processar o pr√≥ximo v√≠deo...")
                        time.sleep(120)  # 120 segundos = 2 minutos
                        
                    except Exception as e:
                        print(f"‚úó Erro ao processar v√≠deo {video['name']}: {str(e)}")
                    finally:
                        # Limpar arquivo tempor√°rio
                        if 'video_path' in locals() and os.path.exists(video_path):
                            try:
                                os.remove(video_path)
                                print(f"üßπ Arquivo tempor√°rio removido: {video_path}")
                            except Exception as e:
                                print(f"‚ö†Ô∏è N√£o foi poss√≠vel remover arquivo tempor√°rio: {str(e)}")
            else:
                print(".", end="", flush=True)  # Indicador de que o script est√° rodando
                
            time.sleep(60)  # Verificar a cada minuto
            
        except Exception as e:
            print(f"\nErro: {str(e)}")
            time.sleep(60)

if __name__ == "__main__":
    main()
    main()